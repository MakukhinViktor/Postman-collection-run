{
	"info": {
		"_postman_id": "641ac529-8674-497a-9729-49a74f3d013e",
		"name": "Makukhin_Viktor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29412894"
	},
	"item": [
		{
			"name": "Lecture-1",
			"item": [
				{
					"name": "User Management",
					"item": [
						{
							"name": "Generate default admin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"//Add default admin token to environment variables",
											"const jsonData = pm.response.json();",
											"pm.environment.set(\"defaultAdminToken\", jsonData.accessToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"6cXJLPzVLV=Y4h+_\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Since this admin is unique and already created, these tests fail:)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'username'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"});",
											"pm.test(\"Check that response body contains 'email'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});",
											"pm.test(\"Check that response body contains 'firstName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"firstName\");",
											"});",
											"pm.test(\"Check that response body contains 'lastName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"lastName\");",
											"});",
											"pm.test(\"Check that response body contains 'role'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"role\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"// pm.test(\"Check that response body contains 'id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt' fields\", function () {",
											"    ",
											"//     pm.expect(responseBody).to.have.property(\"id\");",
											"//     pm.expect(responseBody).to.have.property(\"username\");",
											"//     pm.expect(responseBody).to.have.property(\"email\");",
											"//     pm.expect(responseBody).to.have.property(\"firstName\");",
											"//     pm.expect(responseBody).to.have.property(\"lastName\");",
											"//     pm.expect(responseBody).to.have.property(\"role\");",
											"//     pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"//     pm.expect(responseBody).to.have.property(\"createdAt\");",
											"// });",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
											"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
											"    pm.expect(responseBody.email).to.eql(requestBody.email);",
											"    pm.expect(responseBody.role).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{defaultAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"viktor.admin\",\n    \"firstName\": \"Viktor\",\n    \"lastName\": \"Makukhin\",\n    \"email\": \"viktor.makukhin+123@quantori.academy\",\n    \"password\": \"Qwerty123!\",\n    \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate admin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Add admin token to environment variables",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"AdminToken\", jsonData.accessToken);",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"viktor.admin\",\n  \"password\": \"Qwerty123!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'username'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"});",
											"pm.test(\"Check that response body contains 'email'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});",
											"pm.test(\"Check that response body contains 'firstName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"firstName\");",
											"});",
											"pm.test(\"Check that response body contains 'lastName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"lastName\");",
											"});",
											"pm.test(\"Check that response body contains 'role'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"role\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
											"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
											"    pm.expect(responseBody.email).to.eql(requestBody.email);",
											"    pm.expect(responseBody.role).to.eql(2);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"teacherUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.environment.set(\"teacherPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
											"pm.environment.set(\"teacherFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
											"pm.environment.set(\"teacherLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
											"pm.environment.set(\"teacherEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{teacherUsername}}\",\n    \"firstName\": \"{{teacherFirstName}}\",\n    \"lastName\": \"{{teacherLastName}}\",\n    \"email\": \"{{teacherEmail}}\",\n    \"password\": \"{{teacherPassword}}\",\n    \"role\": \"teacher\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate teacher token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Add teacher token to environment variables",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"teacherToken\", jsonData.accessToken);",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{teacherUsername}}\",\n    \"password\": \"{{teacherPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'username'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"});",
											"pm.test(\"Check that response body contains 'email'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});",
											"pm.test(\"Check that response body contains 'firstName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"firstName\");",
											"});",
											"pm.test(\"Check that response body contains 'lastName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"lastName\");",
											"});",
											"pm.test(\"Check that response body contains 'role'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"role\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
											"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
											"    pm.expect(responseBody.email).to.eql(requestBody.email);",
											"    pm.expect(responseBody.role).to.eql(3);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"studentUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.environment.set(\"studentPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
											"pm.environment.set(\"studentFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
											"pm.environment.set(\"studentLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
											"pm.environment.set(\"studentEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{studentUsername}}\",\n    \"firstName\": \"{{studentFirstName}}\",\n    \"lastName\": \"{{studentLastName}}\",\n    \"email\": \"{{studentEmail}}\",\n    \"password\": \"{{studentPassword}}\",\n    \"role\": \"student\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate student token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Add student token to environment variables",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"studentToken\", jsonData.accessToken);",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{studentUsername}}\",\n    \"password\": \"{{studentPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category Management",
					"item": [
						{
							"name": "Admin role",
							"item": [
								{
									"name": "Create Category",
									"item": [
										{
											"name": "Add category admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Check that response body contains 'id'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"id\");",
															"});",
															"pm.test(\"Check that response body contains 'title'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"title\");",
															"});",
															"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
															"});",
															"pm.test(\"Check that response body contains 'createdAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"createdAt\");",
															"});",
															"",
															"",
															"pm.test(\"Response body values matches the request body info entered\", function () {",
															"    const requestBody = JSON.parse(pm.request.body.raw);",
															"    pm.expect(responseBody.title).to.eql(requestBody.title);",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															"pm.environment.set(\"categoryId\", responseBody.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"{{$randomLoremWords}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories/",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (spaces at the beginning/end)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Check that response body contains 'id'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"id\");",
															"});",
															"pm.test(\"Check that response body contains 'title'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"title\");",
															"});",
															"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
															"});",
															"pm.test(\"Check that response body contains 'createdAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"createdAt\");",
															"});",
															"",
															"",
															"pm.test(\"Response body values matches the request body info entered\", function () {",
															"    const requestBody = JSON.parse(pm.request.body.raw);",
															"    pm.expect(responseBody.title).to.eql(requestBody.title);",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \" {{$randomLoremWords}} \"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (2chars)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'title' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var titleErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"title\";",
															"    });",
															"    pm.expect(titleErrors[0].msg).to.equal(\"Minimum category length is: 3\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (3chars)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Check that response body contains 'id'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"id\");",
															"});",
															"pm.test(\"Check that response body contains 'title'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"title\");",
															"});",
															"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
															"});",
															"pm.test(\"Check that response body contains 'createdAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"createdAt\");",
															"});",
															"",
															"pm.test(\"Response body values matches the request body info entered\", function () {",
															"    const requestBody = JSON.parse(pm.request.body.raw);",
															"    pm.expect(responseBody.title).to.eql(requestBody.title);",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															"pm.environment.set(\"categoryId3\", responseBody.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin max length (100chars)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Define the desired length of the random string",
															"var desiredLength = 100;",
															"",
															"// Initialize an empty string to store the random characters",
															"var randomString = '';",
															"",
															"// Define the character pool (you can customize it)",
															"var characterPool = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя0123456789 ';",
															"",
															"// Generate the random string",
															"while (randomString.length < desiredLength) {",
															"    // Append a random character from the character pool to the string",
															"    var randomIndex = Math.floor(Math.random() * characterPool.length);",
															"    randomString += characterPool.charAt(randomIndex);",
															"}",
															"",
															"// Set the generated random string as an environment variable",
															"pm.environment.set(\"randomEnRuString100\", randomString);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Check that response body contains 'id'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"id\");",
															"});",
															"pm.test(\"Check that response body contains 'title'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"title\");",
															"});",
															"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
															"});",
															"pm.test(\"Check that response body contains 'createdAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"createdAt\");",
															"});",
															"",
															"pm.test(\"Response body values matches the request body info entered\", function () {",
															"    const requestBody = JSON.parse(pm.request.body.raw);",
															"    pm.expect(responseBody.title).to.eql(requestBody.title);",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															"pm.environment.set(\"categoryId100\", responseBody.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"{{randomEnRuString100}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin max+1 length (101chars)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Define the desired length of the random string",
															"var desiredLength = 101;",
															"",
															"// Initialize an empty string to store the random characters",
															"var randomString = '';",
															"",
															"// Define the character pool (you can customize it)",
															"var characterPool = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя0123456789 ';",
															"",
															"// Generate the random string",
															"while (randomString.length < desiredLength) {",
															"    // Append a random character from the character pool to the string",
															"    var randomIndex = Math.floor(Math.random() * characterPool.length);",
															"    randomString += characterPool.charAt(randomIndex);",
															"}",
															"",
															"// Set the generated random string as an environment variable",
															"pm.environment.set(\"randomEnRuString101\", randomString);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'title' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var titleErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"title\";",
															"    });",
															"    pm.expect(titleErrors[0].msg).to.equal(\"Maximum category length is: 100\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"{{randomEnRuString101}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (with symbols)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'title' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var titleErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"title\";",
															"    });",
															"    pm.expect(titleErrors[0].msg).to.equal(\"Only RU/EN alphabet, space and digits allowed, please change your request\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"title\": \"{{$randomLoremWords}}.\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (digits only)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const randomNumber = _.random(1000000000,9999999999)",
															"pm.environment.set(\"randomNumber\", randomNumber)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Check that response body contains 'id'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"id\");",
															"});",
															"pm.test(\"Check that response body contains 'title'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"title\");",
															"});",
															"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
															"});",
															"pm.test(\"Check that response body contains 'createdAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"createdAt\");",
															"});",
															"",
															"pm.test(\"Response body values matches the request body info entered\", function () {",
															"    const requestBody = JSON.parse(pm.request.body.raw);",
															"    pm.expect(responseBody.title).to.eql(requestBody.title);",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"{{randomNumber}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (spaces only)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'title' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var titleErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"title\";",
															"    });",
															"    pm.expect(titleErrors[0].msg).to.equal(\"You are not allowed to use spaces only\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"   \"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (boolean value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'title' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var titleErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"title\";",
															"    });",
															"    pm.expect(titleErrors[0].msg).to.equal(\"Parameter should be a string\");",
															"    pm.expect(titleErrors[1].msg).to.equal(\"Only RU/EN alphabet, space and digits allowed, please change your request\");",
															"    pm.expect(titleErrors[2].msg).to.equal(\"You are not allowed to use spaces only\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": {{$randomBoolean}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (invalid token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Error Unauthorized\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}{{$randomAlphaNumeric}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"{{$randomLoremWords}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (Chinese alphabet)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'title' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var titleErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"title\";",
															"    });",
															"    pm.expect(titleErrors[0].msg).to.equal(\"Only RU/EN alphabet, space and digits allowed, please change your request\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"美食 家居 时尚 旅游 科技 汽车 运动 数码 健康 育儿 娱乐 教育 123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (invalid endpoint route)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Invalid endpoint error\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.error).to.include(\"There is no such endpoint!\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"{{$randomLoremWords}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/category",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"category"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (Empty request body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'title' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var titleErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"title\";",
															"    });",
															"    pm.expect(titleErrors[0].msg).to.equal(\"Please send required fields: title\");",
															"    pm.expect(titleErrors[1].msg).to.equal(\"Parameter should be a string\");",
															"    pm.expect(titleErrors[2].msg).to.equal(\"Minimum category length is: 3\");",
															"    pm.expect(titleErrors[3].msg).to.equal(\"Only RU/EN alphabet, space and digits allowed, please change your request\");",
															"    pm.expect(titleErrors[4].msg).to.equal(\"You are not allowed to use spaces only\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category admin (number value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'title' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var titleErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"title\";",
															"    });",
															"    ",
															"    pm.expect(titleErrors[0].msg).to.equal(\"Parameter should be a string\");",
															"    ",
															"    pm.expect(titleErrors[1].msg).to.equal(\"Only RU/EN alphabet, space and digits allowed, please change your request\");",
															"    pm.expect(titleErrors[2].msg).to.equal(\"You are not allowed to use spaces only\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": 12345\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add category (No Auth)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Error Unauthorized\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"title\": \"{{$randomLoremWords}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get categories",
									"item": [
										{
											"name": "Get list of categories (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"The response body is an array\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('array');",
															"});",
															"",
															"",
															"pm.test(\"Each element in the response array has the required fields - id and title\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
															"",
															"    responseData.forEach(function (element) {",
															"        pm.expect(element).to.be.an('object');",
															"        pm.expect(element.id).to.exist.and.to.be.a('number');",
															"        pm.expect(element.title).to.exist.and.to.be.a('string');",
															"    });",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get category by ID (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Check that response body contains 'id'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"id\");",
															"});",
															"pm.test(\"Check that response body contains 'title'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"title\");",
															"});",
															"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
															"});",
															"pm.test(\"Check that response body contains 'createdAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"createdAt\");",
															"});",
															"",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															"pm.test(\"Check that categoryId is correct\", function () {",
															"    pm.expect(responseBody.id).to.eql(pm.environment.get(\"categoryId\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/{{categoryId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"{{categoryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get category by not existed ID (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Check that response body contains 'errors'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").to.have.string(\"Unable to find category record(s)\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/1",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get category by negative ID (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Invalid endpoint error\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.errors).to.include(\"There is no such endpoint!\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/-1",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"-1"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get category by ID=0 (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															"pm.test(\"Invalid endpoint error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"There is no such endpoint!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/0",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"0"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get category by ID (admin) invalid ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'id' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var idErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"id\";",
															"    });",
															"    ",
															"    pm.expect(idErrors[0].msg).to.equal(\"Parameter should be numeric\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/Backend",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"Backend"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update categories",
									"item": [
										{
											"name": "Update category admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Check that response body contains 'id'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"id\");",
															"});",
															"pm.test(\"Check that response body contains 'title'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"title\");",
															"});",
															"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
															"});",
															"pm.test(\"Check that response body contains 'createdAt'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"createdAt\");",
															"});",
															"",
															"",
															"pm.test(\"Response body values matches the request body info entered\", function () {",
															"    const requestBody = JSON.parse(pm.request.body.raw);",
															"    pm.expect(responseBody.id).to.eql(requestBody.id);",
															"    pm.expect(responseBody.title).to.eql(requestBody.title);",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": {{categoryId}},\n    \"title\": \"{{$randomLoremWords}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update category admin (invalid ID)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'id' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var idErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"id\";",
															"    });",
															"    ",
															"    pm.expect(idErrors[0].msg).to.equal(\"Parameter should be numeric\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"{{$randomAdjective}}\",\n    \"title\": \"{{$randomLoremWords}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update category (No Auth)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Error Unauthorized\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": {{categoryId}},\n    \"title\": \"{{$randomLoremWords}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update category admin (Empty body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'title' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var titleErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"title\";",
															"    });",
															"    pm.expect(titleErrors[0].msg).to.equal(\"Please send required fields: id,title\");",
															"    pm.expect(titleErrors[1].msg).to.equal(\"Parameter should be a string\");",
															"    pm.expect(titleErrors[2].msg).to.equal(\"Minimum category length is: 3\");",
															"    pm.expect(titleErrors[3].msg).to.equal(\"Only RU/EN alphabet, space and digits allowed, please change your request\");",
															"    pm.expect(titleErrors[4].msg).to.equal(\"You are not allowed to use spaces only\");",
															"});",
															"",
															"pm.test(\"Error messages for 'id' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var idErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"id\";",
															"    });",
															"    pm.expect(idErrors[0].msg).to.equal(\"Please send required fields: id,title\");",
															"    pm.expect(idErrors[1].msg).to.equal(\"Parameter should be numeric\");",
															"});",
															"",
															"",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v1/categories",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete category",
									"item": [
										{
											"name": "Delete category by ID (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successfull category deletion\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");",
															"});",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/{{categoryId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"{{categoryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete category not existed ID (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Check that response body contains 'errors'\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").to.have.string(\"Unable to find category record(s)\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/1",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete category ID=0 (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															"pm.test(\"Invalid endpoint error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"There is no such endpoint!\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/0",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"0"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete category negative ID (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Invalid endpoint error\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.errors).to.include(\"There is no such endpoint!\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/-1",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"-1"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete category invalid ID (admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var responseBody = pm.response.json();",
															"pm.test(\"Error messages for 'id' parameter\", function () {",
															"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
															"    var idErrors = responseBody.errors.filter(function (error) {",
															"        return error.param === \"id\";",
															"    });",
															"    ",
															"    pm.expect(idErrors[0].msg).to.equal(\"Parameter should be numeric\");",
															"});",
															"",
															"pm.test(\"Response time is less than 3000ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{host}}/api/v1/categories/Backend",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v1",
														"categories",
														"Backend"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Teacher role",
							"item": [
								{
									"name": "Add category (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Teacher is forbidden to create a category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role teacher\");",
													"});",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacherToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"{{$randomLoremWords}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update category (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Teacher is forbidden to update a category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role teacher\");",
													"});",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacherToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{categoryId}},\n    \"title\": \"{{$randomLoremWords}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of categories (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"The response body is an array\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"});",
													"",
													"",
													"pm.test(\"Each element in the response array has the required fields - id and title\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
													"",
													"    responseData.forEach(function (element) {",
													"        pm.expect(element).to.be.an('object');",
													"        pm.expect(element.id).to.exist.and.to.be.a('number');",
													"        pm.expect(element.title).to.exist.and.to.be.a('string');",
													"    });",
													"});",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacherToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get category by ID (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var responseBody = pm.response.json();",
													"pm.test(\"Check that response body contains 'id'\", function () {",
													"    pm.expect(responseBody).to.have.property(\"id\");",
													"});",
													"pm.test(\"Check that response body contains 'title'\", function () {",
													"    pm.expect(responseBody).to.have.property(\"title\");",
													"});",
													"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
													"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
													"});",
													"pm.test(\"Check that response body contains 'createdAt'\", function () {",
													"    pm.expect(responseBody).to.have.property(\"createdAt\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});",
													"",
													"pm.test(\"Check that categoryId is correct\", function () {",
													"    pm.expect(responseBody.id).to.eql(pm.environment.get(\"categoryId100\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacherToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryId100}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryId100}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete category by ID (teacher)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Teacher is forbidden to delete a category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role teacher\");",
													"});",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacherToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Student role",
							"item": [
								{
									"name": "Add category (student)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Student is forbidden to create a category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");",
													"});",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"{{$randomLoremWords}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update category (student)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Student is forbidden to update a category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");",
													"});",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{categoryId}},\n    \"title\": \"{{$randomLoremWords}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of categories (student)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"The response body is an array\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"});",
													"",
													"",
													"pm.test(\"Each element in the response array has the required fields - id and title\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
													"",
													"    responseData.forEach(function (element) {",
													"        pm.expect(element).to.be.an('object');",
													"        pm.expect(element.id).to.exist.and.to.be.a('number');",
													"        pm.expect(element.title).to.exist.and.to.be.a('string');",
													"    });",
													"});",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get category by ID (student)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var responseBody = pm.response.json();",
													"pm.test(\"Check that response body contains 'id'\", function () {",
													"    pm.expect(responseBody).to.have.property(\"id\");",
													"});",
													"pm.test(\"Check that response body contains 'title'\", function () {",
													"    pm.expect(responseBody).to.have.property(\"title\");",
													"});",
													"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
													"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
													"});",
													"pm.test(\"Check that response body contains 'createdAt'\", function () {",
													"    pm.expect(responseBody).to.have.property(\"createdAt\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});",
													"",
													"pm.test(\"Check that categoryId is correct\", function () {",
													"    pm.expect(responseBody.id).to.eql(pm.environment.get(\"categoryId3\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryId3}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete category by ID (student)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Student is forbidden to delete a category\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");",
													"});",
													"",
													"pm.test(\"Response time is less than 3000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/categories/{{categoryId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories",
												"{{categoryId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get a category by ID (No Auth)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error Unauthorized\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{categoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of categories (No Auth)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error Unauthorized\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Lecture-2",
			"item": [
				{
					"name": "Alive?",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that status is OK\", function () {",
									"  // Parse the response body as JSON",
									"  const responseBody = pm.response.json();",
									"",
									"  // Get the status from the response body",
									"  const status = responseBody.result.status;",
									"",
									"  // Assert that the status is OK",
									"  pm.expect(status).to.equal(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/health",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get default token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add default admin access token to collection variables\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"defaultAdminToken\", jsonData.accessToken);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"accessToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"6cXJLPzVLV=Y4h+_\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/session",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Since this admin is unique and already created, these tests fail:)",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const requestData = JSON.parse(request.data);",
									"pm.collectionVariables.set(\"adminUsername1\", requestData.username);",
									"pm.collectionVariables.set(\"adminPassword1\", requestData.password);",
									"",
									"pm.test(\"Check that response body contains 'id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"username\");",
									"    pm.expect(responseBody).to.have.property(\"email\");",
									"    pm.expect(responseBody).to.have.property(\"firstName\");",
									"    pm.expect(responseBody).to.have.property(\"lastName\");",
									"    pm.expect(responseBody).to.have.property(\"role\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body values matches the request body info entered\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.username).to.eql(requestBody.username);",
									"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
									"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
									"    pm.expect(responseBody.email).to.eql(requestBody.email);",
									"    pm.expect(responseBody.role).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{defaultAdminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"viktor.admin\",\n    \"firstName\": \"Viktor\",\n    \"lastName\": \"Makukhin\",\n    \"email\": \"viktor.makukhin+123@quantori.academy\",\n    \"password\": \"Qwerty123!\",\n    \"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Add admin access token to collection variables\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"AdminToken1\", jsonData.accessToken);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"accessToken\");",
									"});",
									"// const response = pm.response.json();",
									"// console.log(response.accessToken); ",
									"// console.log(response['accessToken']);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{adminUsername1}}\",\n  \"password\": \"{{adminPassword1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/session",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a teacher",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"teacherUsername2\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
									"pm.collectionVariables.set(\"teacherPassword2\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
									"pm.collectionVariables.set(\"teacherFirstName2\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
									"pm.collectionVariables.set(\"teacherLastName2\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
									"pm.collectionVariables.set(\"teacherEmail2\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// const requestData = JSON.parse(request.data);",
									"// pm.collectionVariables.set(\"teacherUsername1\", requestData.username);",
									"// pm.collectionVariables.set(\"teacherPassword1\", requestData.password);",
									"",
									"pm.test(\"Check that response body contains 'id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"username\");",
									"    pm.expect(responseBody).to.have.property(\"email\");",
									"    pm.expect(responseBody).to.have.property(\"firstName\");",
									"    pm.expect(responseBody).to.have.property(\"lastName\");",
									"    pm.expect(responseBody).to.have.property(\"role\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body values matches the request body info entered\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.username).to.eql(pm.collectionVariables.get(\"teacherUsername2\"));",
									"    pm.expect(responseBody.firstName).to.eql(pm.collectionVariables.get(\"teacherFirstName2\"));",
									"    pm.expect(responseBody.lastName).to.eql(pm.collectionVariables.get(\"teacherLastName2\"));",
									"    pm.expect(responseBody.email).to.eql(pm.collectionVariables.get(\"teacherEmail2\"));",
									"    pm.expect(responseBody.role).to.eql(2);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{teacherUsername2}}\",\n    \"firstName\": \"{{teacherFirstName2}}\",\n    \"lastName\": \"{{teacherLastName2}}\",\n    \"email\": \"{{teacherEmail2}}\",\n    \"password\": \"{{teacherPassword2}}\",\n    \"role\": \"teacher\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a teacher token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Add teacher access token to collection variables\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"teacherToken1\", jsonData.accessToken);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"accessToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{teacherUsername2}}\",\n    \"password\": \"{{teacherPassword2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/session",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"username\");",
									"    pm.expect(responseBody).to.have.property(\"email\");",
									"    pm.expect(responseBody).to.have.property(\"firstName\");",
									"    pm.expect(responseBody).to.have.property(\"lastName\");",
									"    pm.expect(responseBody).to.have.property(\"role\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body values matches the request body info entered\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.username).to.eql(pm.collectionVariables.get(\"studentUsername2\"));",
									"    pm.expect(responseBody.firstName).to.eql(pm.collectionVariables.get(\"studentFirstName2\"));",
									"    pm.expect(responseBody.lastName).to.eql(pm.collectionVariables.get(\"studentLastName2\"));",
									"    pm.expect(responseBody.email).to.eql(pm.collectionVariables.get(\"studentEmail2\"));",
									"    pm.expect(responseBody.role).to.eql(3);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"studentUsername2\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
									"pm.collectionVariables.set(\"studentPassword2\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
									"pm.collectionVariables.set(\"studentFirstName2\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
									"pm.collectionVariables.set(\"studentLastName2\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
									"pm.collectionVariables.set(\"studentEmail2\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{studentUsername2}}\",\n    \"firstName\": \"{{studentFirstName2}}\",\n    \"lastName\": \"{{studentLastName2}}\",\n    \"email\": \"{{studentEmail2}}\",\n    \"password\": \"{{studentPassword2}}\",\n    \"role\": \"student\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a student token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Add student access token to collection variables\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"studentToken1\", jsonData.accessToken);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"accessToken\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{studentUsername2}}\",\n    \"password\": \"{{studentPassword2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/session",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create category (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'title', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"title\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body title matches the title entered in the request body\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.title).to.eql(requestBody.title);",
									"});",
									"",
									"// Add category ID to collection variables",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"categoryId1\", jsonData.id);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{$randomLoremWords}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/categories/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course (No Auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error Unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course (Invalid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error Unauthorized\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}1234",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course (invalid path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid endpoint error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"There is no such endpoint!\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/course",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"course"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course (Empty request body)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'errors'\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"errors\");",
									"});",
									"pm.test(\"Request body is empty\", function () {",
									"  pm.expect(pm.request.body.raw).to.be.empty;",
									"});",
									"",
									"pm.test(\"Errors array is not empty\", function () {",
									"pm.expect(pm.response.json().errors).not.to.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course (student)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Student is forbidden to create a course\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"title\");",
									"    pm.expect(responseBody).to.have.property(\"categoryId\");",
									"    pm.expect(responseBody).to.have.property(\"description\");",
									"    pm.expect(responseBody).to.have.property(\"visible\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.title).to.eql(requestBody.title);",
									"    pm.expect(responseBody.description).to.eql(requestBody.description);",
									"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
									"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
									"});",
									"",
									"// Add category ID to collection variables",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"courseIdAdmin\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomLoremWords}}\",\n  \"description\": \"{{$randomLoremWords}}\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"title\");",
									"    pm.expect(responseBody).to.have.property(\"categoryId\");",
									"    pm.expect(responseBody).to.have.property(\"description\");",
									"    pm.expect(responseBody).to.have.property(\"visible\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.title).to.eql(requestBody.title);",
									"    pm.expect(responseBody.description).to.eql(requestBody.description);",
									"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
									"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
									"});",
									"",
									"// Add category ID to collection variables",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"courseIdTeacher\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an already existed course (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Title should be unique error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"title should be unique\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with only spaces in title and description (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Error message for 'title' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var titleErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"title\";",
									"    });",
									"    pm.expect(titleErrors[0].msg).to.equal(\"You are not allowed to use spaces only\");",
									"});",
									"",
									"pm.test(\"Error message for 'description' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var descriptionErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"description\";",
									"    });",
									"    pm.expect(descriptionErrors[0].msg).to.equal(\"You are not allowed to use spaces only\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"   \",\n    \"description\": \"   \",\n    \"visible\": true,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with number values in title and description (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Error messages for 'title' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var titleErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"title\";",
									"    });",
									"    pm.expect(titleErrors).to.be.an(\"array\").with.length(2);",
									"    pm.expect(titleErrors[0].msg).to.equal(\"Parameter should be a string\");",
									"    pm.expect(titleErrors[1].msg).to.equal(\"You are not allowed to use spaces only\");",
									"});",
									"",
									"pm.test(\"Error message for 'description' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var descriptionErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"description\";",
									"    });",
									"",
									"    pm.expect(descriptionErrors).to.be.an(\"array\").with.length(1);",
									"    pm.expect(descriptionErrors[0].msg).to.equal(\"Parameter should be a string\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": 12345,\n    \"description\": 67890,\n    \"visible\": true,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with boolean values in title and description (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Error messages for 'title' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var titleErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"title\";",
									"    });",
									"    pm.expect(titleErrors).to.be.an(\"array\").with.length(2);",
									"    pm.expect(titleErrors[0].msg).to.equal(\"Parameter should be a string\");",
									"    pm.expect(titleErrors[1].msg).to.equal(\"You are not allowed to use spaces only\");",
									"});",
									"",
									"pm.test(\"Error message for 'description' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var descriptionErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"description\";",
									"    });",
									"",
									"    pm.expect(descriptionErrors).to.be.an(\"array\").with.length(1);",
									"    pm.expect(descriptionErrors[0].msg).to.equal(\"Parameter should be a string\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": true,\n    \"description\": false,\n    \"visible\": true,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with missing title (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'errors'\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"errors\");",
									"});",
									"",
									"pm.test(\"Error: 'Parameter should be a string'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Parameter should be a string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n    \"description\": \"Setting up Workspaces\",\n    \"visible\": true,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with missing description (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'errors'\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"errors\");",
									"    pm.expect(responseBody.errors[0].param).to.eql(\"description\")",
									"});",
									"",
									"pm.test(\"Error message contains 'Parameter should be a string' and 'description'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Parameter should be a string\");",
									"    pm.expect(pm.response.text()).to.include(\"description\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman 1\",\n//   \"description\": \"Setting up Workspaces\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with missing visible (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Error message for 'visible' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var visibleError = responseBody.errors.find(function (error) {",
									"        return error.param === \"visible\";",
									"    });",
									"    pm.expect(visibleError.msg).to.equal(\"Parameter should be boolean\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman\",\n  \"description\": \"Setting up Workspaces\",\n//   \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with missing categoryId (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Error messages for 'categoryId' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var categoryIdErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"categoryId\";",
									"    });",
									"    pm.expect(categoryIdErrors).to.be.an(\"array\").with.length(3);",
									"    pm.expect(categoryIdErrors[0].msg).to.equal(\"Please send required fields: title,categoryId\");",
									"    pm.expect(categoryIdErrors[1].msg).to.equal(\"Parameter should be numeric\");",
									"    pm.expect(categoryIdErrors[2].msg).to.equal(\"Unable to find category record(s)\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": true\n//   \"categoryId\": {{categoryId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with string values \"true\"/\"false\" in visible parameter(teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Error message for 'visible' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var visibleErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"visible\";",
									"    });",
									"    pm.expect(visibleErrors).to.be.an(\"array\").with.length(1);",
									"    pm.expect(visibleErrors[0].msg).to.equal(\"Parameter should be boolean\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman Part {{$randomAlphaNumeric}} {{$randomAdjective}}\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": \"false\",\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with string value in visible parameter(teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Error message for 'visible' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var visibleErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"visible\";",
									"    });",
									"    pm.expect(visibleErrors).to.be.an(\"array\").with.length(1);",
									"    pm.expect(visibleErrors[0].msg).to.equal(\"Parameter should be boolean\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman Part {{$randomAlphaNumeric}} {{$randomAdjective}}\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": \"Hello\",\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with number value in visible parameter (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Error message for 'visible' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var visibleErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"visible\";",
									"    });",
									"    pm.expect(visibleErrors).to.be.an(\"array\").with.length(1);",
									"    pm.expect(visibleErrors[0].msg).to.equal(\"Parameter should be boolean\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman Part {{$randomAlphaNumeric}} {{$randomAdjective}}\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": 12345,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with string in categoryId (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Error messages for 'categoryId' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var categoryIdErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"categoryId\";",
									"    });",
									"    pm.expect(categoryIdErrors).to.be.an(\"array\").with.length(2);",
									"    pm.expect(categoryIdErrors[0].msg).to.equal(\"Parameter should be numeric\");",
									"    pm.expect(categoryIdErrors[1].msg).to.equal(\"invalid input syntax for type integer: \\\"Backend testing using Postman Part 1\\\"\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman\",\n  \"description\": \"Setting up Workspaces\",\n  \"visible\": true,\n  \"categoryId\": \"Backend testing using Postman Part 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with a string of letters, digits, symbols (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"title\");",
									"    pm.expect(responseBody).to.have.property(\"categoryId\");",
									"    pm.expect(responseBody).to.have.property(\"description\");",
									"    pm.expect(responseBody).to.have.property(\"visible\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.title).to.eql(requestBody.title);",
									"    pm.expect(responseBody.description).to.eql(requestBody.description);",
									"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
									"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
									"});",
									"",
									"// // Add category ID to collection variables",
									"//     const jsonData = pm.response.json();",
									"//     pm.collectionVariables.set(\"courseId\", jsonData.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Starting with Postman, {{$randomInt}} !@#$%^&*.\",\n  \"description\": \"Setting up Workspaces? )(*&, {{$randomInt}}\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with 2 char (min-1) title and description (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Error messages for 'title' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var titleErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"title\";",
									"    });",
									"    pm.expect(titleErrors[0].msg).to.equal(\"Minimum course title length is: 3\");",
									"});",
									"",
									"pm.test(\"Error message for 'description' parameter\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var descriptionErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"description\";",
									"    });",
									"    pm.expect(descriptionErrors[0].msg).to.equal(\"Minimum course description length is: 3\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with 3 char (min) title and description (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"title\");",
									"    pm.expect(responseBody).to.have.property(\"categoryId\");",
									"    pm.expect(responseBody).to.have.property(\"description\");",
									"    pm.expect(responseBody).to.have.property(\"visible\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.title).to.eql(requestBody.title);",
									"    pm.expect(responseBody.description).to.eql(requestBody.description);",
									"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
									"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
									"});",
									"",
									"// // Add category ID to collection variables",
									"//     const jsonData = pm.response.json();",
									"//     pm.collectionVariables.set(\"courseId\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\n  \"description\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\",\n  \"visible\": false,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with 100 char (max) title (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"title\");",
									"    pm.expect(responseBody).to.have.property(\"categoryId\");",
									"    pm.expect(responseBody).to.have.property(\"description\");",
									"    pm.expect(responseBody).to.have.property(\"visible\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.title).to.eql(requestBody.title);",
									"    pm.expect(responseBody.description).to.eql(requestBody.description);",
									"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
									"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
									"});",
									"",
									"// // Add category ID to collection variables",
									"//     const jsonData = pm.response.json();",
									"//     pm.collectionVariables.set(\"courseId\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the desired length of the random string",
									"var desiredLength = 100;",
									"",
									"// Initialize an empty string to store the random characters",
									"var randomString = '';",
									"",
									"// Define the character pool (you can customize it)",
									"var characterPool = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;:,.<>? ';",
									"",
									"// Generate the random string",
									"while (randomString.length < desiredLength) {",
									"    // Append a random character from the character pool to the string",
									"    var randomIndex = Math.floor(Math.random() * characterPool.length);",
									"    randomString += characterPool.charAt(randomIndex);",
									"}",
									"",
									"// Set the generated random string as an environment variable",
									"pm.collectionVariables.set(\"randomString100\", randomString);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{randomString100}}\",\n  \"description\": \"Setting up the Enviroment, Использование переменных\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with 101 char (max+1) title (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Error messages for 'title' parameter (max length)\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var titleErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"title\";",
									"    });",
									"    pm.expect(titleErrors[0].msg).to.equal(\"Maximum course title length is: 100\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the desired length of the random string",
									"var desiredLength = 101;",
									"",
									"// Initialize an empty string to store the random characters",
									"var randomString = '';",
									"",
									"// Define the character pool (you can customize it)",
									"var characterPool = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;:,.<>? ';",
									"",
									"// Generate the random string",
									"while (randomString.length < desiredLength) {",
									"    // Append a random character from the character pool to the string",
									"    var randomIndex = Math.floor(Math.random() * characterPool.length);",
									"    randomString += characterPool.charAt(randomIndex);",
									"}",
									"",
									"// Set the generated random string as an environment variable",
									"pm.collectionVariables.set(\"randomString101\", randomString);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{randomString101}}\",\n  \"description\": \"Setting up the Enviroment, Использование переменных\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with 500 char (max) description (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"title\");",
									"    pm.expect(responseBody).to.have.property(\"categoryId\");",
									"    pm.expect(responseBody).to.have.property(\"description\");",
									"    pm.expect(responseBody).to.have.property(\"visible\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.title).to.eql(requestBody.title);",
									"    pm.expect(responseBody.description).to.eql(requestBody.description);",
									"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
									"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
									"});",
									"",
									"// // Add category ID to collection variables",
									"//     const jsonData = pm.response.json();",
									"//     pm.collectionVariables.set(\"courseId\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the desired length of the random strings",
									"var desiredLength1 = 100;",
									"var desiredLength2 = 500;",
									"",
									"// Initialize empty strings to store the random characters",
									"var randomString1 = '';",
									"var randomString2 = '';",
									"",
									"// Define the character pool (you can customize it)",
									"var characterPool = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;:,.<>?';",
									"",
									"// Generate the first random string",
									"while (randomString1.length < desiredLength1) {",
									"    var randomIndex = Math.floor(Math.random() * characterPool.length);",
									"    randomString1 += characterPool.charAt(randomIndex);",
									"}",
									"",
									"// Generate the second random string",
									"while (randomString2.length < desiredLength2) {",
									"    var randomIndex = Math.floor(Math.random() * characterPool.length);",
									"    randomString2 += characterPool.charAt(randomIndex);",
									"}",
									"",
									"// Set the generated random strings as environment variables",
									"pm.collectionVariables.set(\"randomString100\", randomString1);",
									"pm.collectionVariables.set(\"randomString500\", randomString2);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{randomString100}}\",\n  \"description\": \"{{randomString500}}\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a course with 501 char (max+1) description (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.test(\"Error messages for 'description' parameter (max length)\", function () {",
									"    pm.expect(responseBody).to.have.property(\"errors\").that.is.an(\"array\");",
									"    var titleErrors = responseBody.errors.filter(function (error) {",
									"        return error.param === \"description\";",
									"    });",
									"    pm.expect(titleErrors[0].msg).to.equal(\"Maximum course description length is: 500\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the desired length of the random strings",
									"var desiredLength1 = 100;",
									"var desiredLength2 = 501;",
									"",
									"// Initialize empty strings to store the random characters",
									"var randomString1 = '';",
									"var randomString2 = '';",
									"",
									"// Define the character pool (you can customize it)",
									"var characterPool = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;:,.<>?';",
									"",
									"// Generate the first random string",
									"while (randomString1.length < desiredLength1) {",
									"    var randomIndex = Math.floor(Math.random() * characterPool.length);",
									"    randomString1 += characterPool.charAt(randomIndex);",
									"}",
									"",
									"// Generate the second random string",
									"while (randomString2.length < desiredLength2) {",
									"    var randomIndex = Math.floor(Math.random() * characterPool.length);",
									"    randomString2 += characterPool.charAt(randomIndex);",
									"}",
									"",
									"// Set the generated random strings as environment variables",
									"pm.collectionVariables.set(\"randomString100\", randomString1);",
									"pm.collectionVariables.set(\"randomString500\", randomString2);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{randomString100}}\",\n  \"description\": \"{{randomString500}}\",\n  \"visible\": true,\n  \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course list (NoAuth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Response body contains 'Unauthorized'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course list (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var courses = pm.response.json();",
									"",
									"pm.test(\"Response contains a list of courses\", function () {",
									"    pm.expect(courses).to.be.an('array');",
									"    pm.expect(courses).to.have.length.above(0); // Check that there's at least one course",
									"});",
									"pm.test(\"Request body contains a list of courses with id, title, description, visible, categoryId, likes, dislikes\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"title\");",
									"    pm.expect(pm.response.text()).to.include(\"description\");",
									"    pm.expect(pm.response.text()).to.include(\"visible\");",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");",
									"    pm.expect(pm.response.text()).to.include(\"likes\");",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course list (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var courses = pm.response.json();",
									"",
									"pm.test(\"Response contains a list of courses\", function () {",
									"    pm.expect(courses).to.be.an('array');",
									"    pm.expect(courses).to.have.length.above(0); // Check that there's at least one course",
									"});",
									"pm.test(\"Request body contains a list of courses with id, title, description, visible, categoryId, likes, dislikes\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"title\");",
									"    pm.expect(pm.response.text()).to.include(\"description\");",
									"    pm.expect(pm.response.text()).to.include(\"visible\");",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");",
									"    pm.expect(pm.response.text()).to.include(\"likes\");",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course list (student)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var courses = pm.response.json();",
									"",
									"pm.test(\"Response contains a list of courses\", function () {",
									"    pm.expect(courses).to.be.an('array');",
									"    pm.expect(courses).to.have.length.above(0); // Check that there's at least one course",
									"});",
									"pm.test(\"Request body contains a list of courses with id, title, description, visible, categoryId, likes, dislikes\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"title\");",
									"    pm.expect(pm.response.text()).to.include(\"description\");",
									"    pm.expect(pm.response.text()).to.include(\"visible\");",
									"    pm.expect(pm.response.text()).to.include(\"categoryId\");",
									"    pm.expect(pm.response.text()).to.include(\"likes\");",
									"    pm.expect(pm.response.text()).to.include(\"dislikes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course by ID (student) negative ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid endpoint error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"There is no such endpoint!\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course by ID (student) ID=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid endpoint error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"There is no such endpoint!\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/0",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course by ID (student) ID=string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid endpoint error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"There is no such endpoint!\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/courseId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"courseId"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course by ID (NoAuth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Response body contains 'Unauthorized'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdTeacher}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdTeacher}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course by ID (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var responseBody = pm.response.json();",
									"pm.test(\"Verify course properties and values\", function () {",
									"    pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"    pm.expect(responseBody).to.have.property('title').that.is.a('string');",
									"    pm.expect(responseBody).to.have.property('description').that.is.a('string');",
									"    pm.expect(responseBody).to.have.property('visible').that.is.a('boolean');",
									"    pm.expect(responseBody).to.have.property('categoryId').that.is.a('number');",
									"    pm.expect(responseBody).to.have.property('likes').that.is.a('number');",
									"    pm.expect(responseBody).to.have.property('dislikes').that.is.a('number');",
									"});",
									"",
									"pm.test(\"Check that id and categoryId are correct\", function () {",
									"    pm.expect(responseBody.id).to.eql(pm.collectionVariables.get(\"courseIdAdmin\"));",
									"    pm.expect(responseBody.categoryId).to.eql(pm.collectionVariables.get(\"categoryId1\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdAdmin}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdAdmin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course by ID (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var responseBody = pm.response.json();",
									"pm.test(\"Verify course properties and values\", function () {",
									"    pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"    pm.expect(responseBody).to.have.property('title').that.is.a('string');",
									"    pm.expect(responseBody).to.have.property('description').that.is.a('string');",
									"    pm.expect(responseBody).to.have.property('visible').that.is.a('boolean');",
									"    pm.expect(responseBody).to.have.property('categoryId').that.is.a('number');",
									"    pm.expect(responseBody).to.have.property('likes').that.is.a('number');",
									"    pm.expect(responseBody).to.have.property('dislikes').that.is.a('number');",
									"});",
									"",
									"pm.test(\"Check that id and categoryId are correct\", function () {",
									"    pm.expect(responseBody.id).to.eql(pm.collectionVariables.get(\"courseIdTeacher\"));",
									"    pm.expect(responseBody.categoryId).to.eql(pm.collectionVariables.get(\"categoryId1\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdTeacher}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdTeacher}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get course by ID (student)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var responseBody = pm.response.json();",
									"pm.test(\"Verify course properties and values\", function () {",
									"    pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"    pm.expect(responseBody).to.have.property('title').that.is.a('string');",
									"    pm.expect(responseBody).to.have.property('description').that.is.a('string');",
									"    pm.expect(responseBody).to.have.property('visible').that.is.a('boolean');",
									"    pm.expect(responseBody).to.have.property('categoryId').that.is.a('number');",
									"    pm.expect(responseBody).to.have.property('likes').that.is.a('number');",
									"    pm.expect(responseBody).to.have.property('dislikes').that.is.a('number');",
									"});",
									"",
									"pm.test(\"Check that id and categoryId are correct\", function () {",
									"    pm.expect(responseBody.id).to.eql(pm.collectionVariables.get(\"courseIdTeacher\"));",
									"    pm.expect(responseBody.categoryId).to.eql(pm.collectionVariables.get(\"categoryId1\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdTeacher}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdTeacher}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update course (NoAuth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Response body contains 'Unauthorized'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{courseIdTeacher}},\n    \"title\": \"Starting with Postman Part 1\",\n    \"description\": \"{{$randomLoremWords}}\",\n    \"visible\": false,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update course empty body (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'errors'\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"errors\");",
									"});",
									"pm.test(\"Request body is empty\", function () {",
									"  pm.expect(pm.request.body.raw).to.be.empty;",
									"});",
									"",
									"pm.test(\"Errors array is not empty\", function () {",
									"pm.expect(pm.response.json().errors).not.to.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update course no ID (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error messages for the 'id' parameter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"Please send required fields: id\");",
									"    pm.expect(jsonData.errors[1].msg).to.eql(\"Parameter should be numeric\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    // \"id\": true,\n    \"title\": \"Starting with Postman Part 1\",\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"visible\": false,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update course ID=string (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message for the 'id' parameter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"courseId\",\n    \"title\": \"Starting with Postman Part 1\",\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"visible\": false,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update course ID=boolean (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message for the 'id' parameter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"Parameter should be numeric\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": false,\n    \"title\": \"Starting with Postman Part 1\",\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"visible\": false,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update course (student)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Student is forbidden to update a course\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{courseIdTeacher}},\n    \"title\": \"Starting with Postman Part 1\",\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"visible\": false,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update course created by admin (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"title\");",
									"    pm.expect(responseBody).to.have.property(\"categoryId\");",
									"    pm.expect(responseBody).to.have.property(\"description\");",
									"    pm.expect(responseBody).to.have.property(\"visible\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.title).to.eql(requestBody.title);",
									"    pm.expect(responseBody.description).to.eql(requestBody.description);",
									"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
									"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{courseIdAdmin}},\n    \"title\": \"{{$randomLoremWords}}\",\n    \"description\": \"{{$randomLoremWords}}\",\n    \"visible\": false,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update course created by teacher (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Verifying error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{courseIdTeacher}},\n    \"title\": \"{{$randomCatchPhrase}}\",\n    \"description\": \"{{$randomCatchPhrase}}\",\n    \"visible\": false,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update course (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that response body contains 'id', 'title', 'categoryId', 'description', 'visible', 'updatedAt', 'createdAt' fields\", function () {",
									"    // Parse the response body as JSON",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"title\");",
									"    pm.expect(responseBody).to.have.property(\"categoryId\");",
									"    pm.expect(responseBody).to.have.property(\"description\");",
									"    pm.expect(responseBody).to.have.property(\"visible\");",
									"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
									"    pm.expect(responseBody).to.have.property(\"createdAt\");",
									"});",
									"",
									"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
									"    const responseBody = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseBody.title).to.eql(requestBody.title);",
									"    pm.expect(responseBody.description).to.eql(requestBody.description);",
									"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
									"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{courseIdTeacher}},\n    \"title\": \"{{$randomLoremWords}}\",\n    \"description\": \"{{$randomLoremWords}}\",\n    \"visible\": false,\n    \"categoryId\": {{categoryId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/courses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a course (No Auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Response body contains 'Unauthorized'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdTeacher}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdTeacher}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a course No ID (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid endpoint error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"There is no such endpoint!\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a course (student)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Student is forbidden to delete a course\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdTeacher}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdTeacher}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a course negative ID (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid endpoint error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"There is no such endpoint!\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/-1",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a course ID=string (teacher) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid endpoint error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"There is no such endpoint!\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/string",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"string"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a course another ID (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Teacher is forbidden to delete a course if they are not an owner\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"You're not owner of this course, you can't change/remove it\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdAdmin}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdAdmin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a course (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Successfull deletion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdTeacher}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdTeacher}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a course (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Successfull deletion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdAdmin}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdAdmin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check that course was deleted (teacher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Course is not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{teacherToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdTeacher}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdTeacher}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check that course was deleted (student)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Course is not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdTeacher}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdTeacher}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check that course was deleted (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Course is not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/courses/{{courseIdAdmin}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseIdAdmin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete category by ID (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Delete was successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminToken1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/categories/{{categoryId1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"{{categoryId1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lecture-3",
			"item": [
				{
					"name": "Scenario 1 Admin can manage categories",
					"item": [
						{
							"name": "Log in under the default admin role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"//Add default admin token to environment variables",
											"const jsonData = pm.response.json();",
											"pm.environment.set(\"defaultAdminToken\", jsonData.accessToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"6cXJLPzVLV=Y4h+_\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register a new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'username'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"});",
											"pm.test(\"Check that response body contains 'email'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});",
											"pm.test(\"Check that response body contains 'firstName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"firstName\");",
											"});",
											"pm.test(\"Check that response body contains 'lastName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"lastName\");",
											"});",
											"pm.test(\"Check that response body contains 'role'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"role\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"// pm.test(\"Check that response body contains 'id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt' fields\", function () {",
											"    ",
											"//     pm.expect(responseBody).to.have.property(\"id\");",
											"//     pm.expect(responseBody).to.have.property(\"username\");",
											"//     pm.expect(responseBody).to.have.property(\"email\");",
											"//     pm.expect(responseBody).to.have.property(\"firstName\");",
											"//     pm.expect(responseBody).to.have.property(\"lastName\");",
											"//     pm.expect(responseBody).to.have.property(\"role\");",
											"//     pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"//     pm.expect(responseBody).to.have.property(\"createdAt\");",
											"// });",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
											"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
											"    pm.expect(responseBody.email).to.eql(requestBody.email);",
											"    pm.expect(responseBody.role).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"adminUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.environment.set(\"adminPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
											"pm.environment.set(\"adminFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
											"pm.environment.set(\"adminLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
											"pm.environment.set(\"adminEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{defaultAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"firstName\": \"{{adminFirstName}}\",\n    \"lastName\": \"{{adminLastName}}\",\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log in under a new registered admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Add admin token to environment variables",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"randomAdminToken\", jsonData.accessToken);",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"{{adminPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"The response body is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Each element in the response array has the required fields - id and title\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
											"",
											"    responseData.forEach(function (element) {",
											"        pm.expect(element).to.be.an('object');",
											"        pm.expect(element.id).to.exist.and.to.be.a('number');",
											"        pm.expect(element.title).to.exist.and.to.be.a('string');",
											"    });",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{randomAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.title).to.eql(requestBody.title);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.environment.set(\"randomCategoryId\", responseBody.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{randomAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremWords}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Check that category was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.test(\"Check that categoryId is correct\", function () {",
											"    pm.expect(responseBody.id).to.eql(pm.environment.get(\"randomCategoryId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{randomAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{randomCategoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{randomCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.id).to.eql(requestBody.id);",
											"    pm.expect(responseBody.title).to.eql(requestBody.title);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{randomAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{randomCategoryId}},\n    \"title\": \"{{$randomLoremWords}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Successfull category deletion\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");",
											"});",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{randomAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{randomCategoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{randomCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check that category was deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'errors'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"errors\").to.have.string(\"Unable to find category record(s)\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{randomAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{randomCategoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{randomCategoryId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2 Teacher can manage courses",
					"item": [
						{
							"name": "Log in under the default admin role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"//Add default admin token to environment variables",
											"const jsonData = pm.response.json();",
											"pm.environment.set(\"defaultAdminToken\", jsonData.accessToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"6cXJLPzVLV=Y4h+_\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register a new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'username'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"});",
											"pm.test(\"Check that response body contains 'email'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});",
											"pm.test(\"Check that response body contains 'firstName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"firstName\");",
											"});",
											"pm.test(\"Check that response body contains 'lastName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"lastName\");",
											"});",
											"pm.test(\"Check that response body contains 'role'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"role\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"// pm.test(\"Check that response body contains 'id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt' fields\", function () {",
											"    ",
											"//     pm.expect(responseBody).to.have.property(\"id\");",
											"//     pm.expect(responseBody).to.have.property(\"username\");",
											"//     pm.expect(responseBody).to.have.property(\"email\");",
											"//     pm.expect(responseBody).to.have.property(\"firstName\");",
											"//     pm.expect(responseBody).to.have.property(\"lastName\");",
											"//     pm.expect(responseBody).to.have.property(\"role\");",
											"//     pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"//     pm.expect(responseBody).to.have.property(\"createdAt\");",
											"// });",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
											"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
											"    pm.expect(responseBody.email).to.eql(requestBody.email);",
											"    pm.expect(responseBody.role).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"adminUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.environment.set(\"adminPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
											"pm.environment.set(\"adminFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
											"pm.environment.set(\"adminLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
											"pm.environment.set(\"adminEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{defaultAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"firstName\": \"{{adminFirstName}}\",\n    \"lastName\": \"{{adminLastName}}\",\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'username'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"});",
											"pm.test(\"Check that response body contains 'email'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});",
											"pm.test(\"Check that response body contains 'firstName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"firstName\");",
											"});",
											"pm.test(\"Check that response body contains 'lastName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"lastName\");",
											"});",
											"pm.test(\"Check that response body contains 'role'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"role\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
											"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
											"    pm.expect(responseBody.email).to.eql(requestBody.email);",
											"    pm.expect(responseBody.role).to.eql(2);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"teacherUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.environment.set(\"teacherPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
											"pm.environment.set(\"teacherFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
											"pm.environment.set(\"teacherLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
											"pm.environment.set(\"teacherEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{teacherUsername}}\",\n    \"firstName\": \"{{teacherFirstName}}\",\n    \"lastName\": \"{{teacherLastName}}\",\n    \"email\": \"{{teacherEmail}}\",\n    \"password\": \"{{teacherPassword}}\",\n    \"role\": \"teacher\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log in under a new registered admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Add admin token to environment variables",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"randomAdminToken\", jsonData.accessToken);",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"{{adminPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new category under an admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.title).to.eql(requestBody.title);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.environment.set(\"randomCategoryId\", responseBody.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{randomAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremWords}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Log in under a new registered teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Add teacher token to environment variables",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"teacherToken\", jsonData.accessToken);",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{teacherUsername}}\",\n    \"password\": \"{{teacherPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a list of available categories under a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"The response body is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Each element in the response array has the required fields - id and title\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
											"",
											"    responseData.forEach(function (element) {",
											"        pm.expect(element).to.be.an('object');",
											"        pm.expect(element.id).to.exist.and.to.be.a('number');",
											"        pm.expect(element.title).to.exist.and.to.be.a('string');",
											"    });",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// // Get the response data",
											"// var responseData = pm.response.json();",
											"",
											"// // Generate a random index within the range of the response data array",
											"// var randomIndex = Math.floor(Math.random() * responseData.length);",
											"",
											"// // Get the category ID at the random index",
											"// var randomCategoryId = responseData[randomIndex].id;",
											"",
											"// // Store the random category ID in an environment variable",
											"// pm.environment.set(\"randomCategoryId\", randomCategoryId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a category by ID under a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.test(\"Check that categoryId is correct\", function () {",
											"    pm.expect(responseBody.id).to.eql(pm.environment.get(\"randomCategoryId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories/{{randomCategoryId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{randomCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a course under a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'categoryId'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"categoryId\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'description'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"description\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'visible'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"visible\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
											"    const responseBody = pm.response.json();",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.title).to.eql(requestBody.title);",
											"    pm.expect(responseBody.description).to.eql(requestBody.description);",
											"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
											"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Add course ID to environment variables",
											"    const jsonData = pm.response.json();",
											"    pm.environment.set(\"courseId\", jsonData.id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"{{$randomLoremWords}}\",\n  \"description\": \"{{$randomLoremWords}}\",\n  \"visible\": true,\n  \"categoryId\": {{randomCategoryId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check that course was created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"pm.test(\"Check that response body contains 'description'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"description\");",
											"});",
											"pm.test(\"Check that response body contains 'visible'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"visible\");",
											"});",
											"pm.test(\"Check that response body contains 'categoryId'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"categoryId\");",
											"});",
											"pm.test(\"Check that response body contains 'likes'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"likes\");",
											"});",
											"pm.test(\"Check that response body contains 'dislikes'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"dislikes\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"pm.test(\"Check that id and categoryId are correct\", function () {",
											"    pm.expect(responseBody.id).to.eql(pm.environment.get(\"courseId\"));",
											"    pm.expect(responseBody.categoryId).to.eql(pm.environment.get(\"randomCategoryId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a course under a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'categoryId'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"categoryId\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'description'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"description\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'visible'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"visible\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
											"    const responseBody = pm.response.json();",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.title).to.eql(requestBody.title);",
											"    pm.expect(responseBody.description).to.eql(requestBody.description);",
											"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
											"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{courseId}},\n    \"title\": \"{{$randomLoremWords}}\",\n    \"description\": \"{{$randomLoremWords}}\",\n    \"visible\": {{$randomBoolean}},\n    \"categoryId\": {{randomCategoryId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a course under a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Successfull category deletion\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");",
											"});",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check that course was deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Course is not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3 Student can enroll in a course",
					"item": [
						{
							"name": "Log in under the default admin role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"//Add default admin token to environment variables",
											"const jsonData = pm.response.json();",
											"pm.environment.set(\"defaultAdminToken\", jsonData.accessToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"6cXJLPzVLV=Y4h+_\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register a new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'username'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"});",
											"pm.test(\"Check that response body contains 'email'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});",
											"pm.test(\"Check that response body contains 'firstName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"firstName\");",
											"});",
											"pm.test(\"Check that response body contains 'lastName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"lastName\");",
											"});",
											"pm.test(\"Check that response body contains 'role'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"role\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"// pm.test(\"Check that response body contains 'id', 'username', 'email', 'firstName', 'lastName', 'role', 'updatedAt', 'createdAt' fields\", function () {",
											"    ",
											"//     pm.expect(responseBody).to.have.property(\"id\");",
											"//     pm.expect(responseBody).to.have.property(\"username\");",
											"//     pm.expect(responseBody).to.have.property(\"email\");",
											"//     pm.expect(responseBody).to.have.property(\"firstName\");",
											"//     pm.expect(responseBody).to.have.property(\"lastName\");",
											"//     pm.expect(responseBody).to.have.property(\"role\");",
											"//     pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"//     pm.expect(responseBody).to.have.property(\"createdAt\");",
											"// });",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
											"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
											"    pm.expect(responseBody.email).to.eql(requestBody.email);",
											"    pm.expect(responseBody.role).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"adminUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.environment.set(\"adminPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
											"pm.environment.set(\"adminFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
											"pm.environment.set(\"adminLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
											"pm.environment.set(\"adminEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{defaultAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"firstName\": \"{{adminFirstName}}\",\n    \"lastName\": \"{{adminLastName}}\",\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'username'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"});",
											"pm.test(\"Check that response body contains 'email'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});",
											"pm.test(\"Check that response body contains 'firstName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"firstName\");",
											"});",
											"pm.test(\"Check that response body contains 'lastName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"lastName\");",
											"});",
											"pm.test(\"Check that response body contains 'role'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"role\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
											"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
											"    pm.expect(responseBody.email).to.eql(requestBody.email);",
											"    pm.expect(responseBody.role).to.eql(2);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"teacherUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.environment.set(\"teacherPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
											"pm.environment.set(\"teacherFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
											"pm.environment.set(\"teacherLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
											"pm.environment.set(\"teacherEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{teacherUsername}}\",\n    \"firstName\": \"{{teacherFirstName}}\",\n    \"lastName\": \"{{teacherLastName}}\",\n    \"email\": \"{{teacherEmail}}\",\n    \"password\": \"{{teacherPassword}}\",\n    \"role\": \"teacher\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'username'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"});",
											"pm.test(\"Check that response body contains 'email'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});",
											"pm.test(\"Check that response body contains 'firstName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"firstName\");",
											"});",
											"pm.test(\"Check that response body contains 'lastName'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"lastName\");",
											"});",
											"pm.test(\"Check that response body contains 'role'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"role\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.expect(responseBody.firstName).to.eql(requestBody.firstName);",
											"    pm.expect(responseBody.lastName).to.eql(requestBody.lastName);",
											"    pm.expect(responseBody.email).to.eql(requestBody.email);",
											"    pm.expect(responseBody.role).to.eql(3);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"studentUsername\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
											"pm.environment.set(\"studentPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
											"pm.environment.set(\"studentFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
											"pm.environment.set(\"studentLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
											"pm.environment.set(\"studentEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{studentUsername}}\",\n    \"firstName\": \"{{studentFirstName}}\",\n    \"lastName\": \"{{studentLastName}}\",\n    \"email\": \"{{studentEmail}}\",\n    \"password\": \"{{studentPassword}}\",\n    \"role\": \"student\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log in under a new registered admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Add admin token to environment variables",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"randomAdminToken\", jsonData.accessToken);",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{adminUsername}}\",\n  \"password\": \"{{adminPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new category under an admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"",
											"pm.test(\"Response body values matches the request body info entered\", function () {",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.title).to.eql(requestBody.title);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.environment.set(\"randomCategoryId\", responseBody.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{randomAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremWords}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Log in under a new registered teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Add teacher token to environment variables",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"teacherToken\", jsonData.accessToken);",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{teacherUsername}}\",\n    \"password\": \"{{teacherPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a course under a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Check that response body contains 'id'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});",
											"pm.test(\"Check that response body contains 'title'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"title\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'categoryId'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"categoryId\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'description'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"description\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'visible'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"visible\");",
											"});",
											"",
											"pm.test(\"Check that response body contains 'updatedAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"updatedAt\");",
											"});",
											"pm.test(\"Check that response body contains 'createdAt'\", function () {",
											"    pm.expect(responseBody).to.have.property(\"createdAt\");",
											"});",
											"",
											"pm.test(\"Response body title, description, visible, categoryId matches the ones entered in the request body\", function () {",
											"    const responseBody = pm.response.json();",
											"    const requestBody = JSON.parse(pm.request.body.raw);",
											"    pm.expect(responseBody.title).to.eql(requestBody.title);",
											"    pm.expect(responseBody.description).to.eql(requestBody.description);",
											"    pm.expect(responseBody.visible).to.eql(requestBody.visible);",
											"    pm.expect(responseBody.categoryId).to.eql(requestBody.categoryId);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Add course ID to environment variables",
											"    const jsonData = pm.response.json();",
											"    pm.environment.set(\"courseId\", jsonData.id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"{{$randomLoremWords}}\",\n  \"description\": \"{{$randomLoremWords}}\",\n  \"visible\": true,\n  \"categoryId\": {{randomCategoryId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log in under a new registered student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Add student token to environment variables",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"studentToken\", jsonData.accessToken);",
											"",
											"pm.test(\"Check that response body contains 'accessToken' field\", function () {",
											"    // Parse the response body as JSON",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"accessToken\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{studentUsername}}\",\n    \"password\": \"{{studentPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a course list under a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var courses = pm.response.json();",
											"",
											"pm.test(\"Response contains a list of courses\", function () {",
											"    pm.expect(courses).to.be.an('array');",
											"    pm.expect(courses).to.have.length.above(0); // Check that there's at least one course",
											"});",
											"",
											"",
											"",
											"pm.test(\"Each course in the response has a valid id, title, description, visible, categoryId, likes, and dislikes\", function () {",
											"    courses.forEach(function(course) {",
											"        pm.expect(course).to.have.property(\"id\").that.is.a(\"number\");",
											"        pm.expect(course).to.have.property(\"title\").that.is.a(\"string\");",
											"        pm.expect(course).to.have.property(\"description\").that.is.a(\"string\");",
											"        pm.expect(course).to.have.property(\"visible\").that.is.a(\"boolean\");",
											"        pm.expect(course).to.have.property(\"categoryId\").that.is.a(\"number\");",
											"        pm.expect(course).to.have.property(\"likes\").that.is.a(\"number\");",
											"        pm.expect(course).to.have.property(\"dislikes\").that.is.a(\"number\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll in a course under a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with result property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('result');",
											"});",
											"",
											"pm.test(\"Successfull enrollment\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result).to.eql(\"You've successfully enrolled the course\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId}}/enroll",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Smash a like button! under a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for response",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with result property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('result');",
											"});",
											"",
											"pm.test(\"Successfully like a course\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result).to.eql(\"You've liked the course\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId}}/like/yes",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId}}",
										"like",
										"yes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Leave a course under a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for response",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an object with result property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('result');",
											"});",
											"",
											"pm.test(\"Successfully like a course\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result).to.eql(\"You've successfully left the course\");",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseId}}/leave",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseId}}",
										"leave"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Check server status and unset env variable values",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check that status is OK\", function () {",
							"  // Parse the response body as JSON",
							"  const responseBody = pm.response.json();",
							"",
							"  // Get the status from the response body",
							"  const status = responseBody.result.status;",
							"",
							"  // Assert that the status is OK",
							"  pm.expect(status).to.equal(\"OK\");",
							"});",
							"",
							"",
							"// Get all the names of the environment variables",
							"const environmentVariables = pm.environment.values.map(function(variable) {",
							"  return variable.key;",
							"});",
							"",
							"// Clear the initial and current values of all the environment variables",
							"environmentVariables.forEach(function(variableName) {",
							"  pm.environment.set(variableName, undefined);",
							"});",
							"",
							"",
							"// // Loop through all environment variables and clear their values",
							"// Object.keys(pm.environment.toObject()).forEach(function(key) {",
							"//     pm.environment.set(key, null);",
							"// });",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/v1/health",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"health"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://qa-school-test.quantori.academy"
		},
		{
			"key": "admintoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "newadmintoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "teachertoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "studenttoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "defaultAdminToken",
			"value": ""
		},
		{
			"key": "adminUsername",
			"value": ""
		},
		{
			"key": "adminUsername1",
			"value": ""
		},
		{
			"key": "adminPassword1",
			"value": ""
		},
		{
			"key": "AdminToken1",
			"value": ""
		},
		{
			"key": "teacherUsername1",
			"value": ""
		},
		{
			"key": "teacherPassword1",
			"value": ""
		},
		{
			"key": "teacherToken1",
			"value": ""
		},
		{
			"key": "studentUsername1",
			"value": ""
		},
		{
			"key": "studentPassword1",
			"value": ""
		},
		{
			"key": "studentToken1",
			"value": ""
		},
		{
			"key": "teacherUsername2",
			"value": ""
		},
		{
			"key": "teacherPassword2",
			"value": ""
		},
		{
			"key": "teacherFirstName",
			"value": ""
		},
		{
			"key": "teacherLastName",
			"value": ""
		},
		{
			"key": "teacherEmail",
			"value": ""
		},
		{
			"key": "studentUsername2",
			"value": ""
		},
		{
			"key": "studentPassword2",
			"value": ""
		},
		{
			"key": "studentFirstName",
			"value": ""
		},
		{
			"key": "studentLastName",
			"value": ""
		},
		{
			"key": "studentEmail",
			"value": ""
		},
		{
			"key": "categoryId",
			"value": ""
		},
		{
			"key": "courseId",
			"value": ""
		},
		{
			"key": "courseIdAdmin",
			"value": ""
		},
		{
			"key": "randomString101",
			"value": ""
		},
		{
			"key": "randomString100",
			"value": ""
		},
		{
			"key": "randomString500",
			"value": ""
		},
		{
			"key": "teacherToken",
			"value": ""
		},
		{
			"key": "teacherFirstName2",
			"value": ""
		},
		{
			"key": "teacherLastName2",
			"value": ""
		},
		{
			"key": "teacherEmail2",
			"value": ""
		},
		{
			"key": "studentFirstName2",
			"value": ""
		},
		{
			"key": "studentLastName2",
			"value": ""
		},
		{
			"key": "studentEmail2",
			"value": ""
		},
		{
			"key": "categoryId1",
			"value": ""
		},
		{
			"key": "courseIdTeacher",
			"value": ""
		}
	]
}